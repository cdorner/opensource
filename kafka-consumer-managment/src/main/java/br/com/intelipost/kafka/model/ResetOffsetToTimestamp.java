/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.intelipost.kafka.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class ResetOffsetToTimestamp extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2564773338152200355L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ResetOffsetToTimestamp\",\"namespace\":\"br.com.intelipost.kafka.model\",\"fields\":[{\"name\":\"consumerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<ResetOffsetToTimestamp> ENCODER =
      new BinaryMessageEncoder<ResetOffsetToTimestamp>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ResetOffsetToTimestamp> DECODER =
      new BinaryMessageDecoder<ResetOffsetToTimestamp>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ResetOffsetToTimestamp> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ResetOffsetToTimestamp> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ResetOffsetToTimestamp> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ResetOffsetToTimestamp>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ResetOffsetToTimestamp to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ResetOffsetToTimestamp from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ResetOffsetToTimestamp instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ResetOffsetToTimestamp fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String consumerId;
   private java.time.Instant timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ResetOffsetToTimestamp() {}

  /**
   * All-args constructor.
   * @param consumerId The new value for consumerId
   * @param timestamp The new value for timestamp
   */
  public ResetOffsetToTimestamp(java.lang.String consumerId, java.time.Instant timestamp) {
    this.consumerId = consumerId;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return consumerId;
    case 1: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: consumerId = value$ != null ? value$.toString() : null; break;
    case 1: timestamp = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'consumerId' field.
   * @return The value of the 'consumerId' field.
   */
  public java.lang.String getConsumerId() {
    return consumerId;
  }

  /**
   * Gets the value of the 'consumerId' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalConsumerId() {
    return Optional.<java.lang.String>ofNullable(consumerId);
  }

  /**
   * Sets the value of the 'consumerId' field.
   * @param value the value to set.
   */
  public void setConsumerId(java.lang.String value) {
    this.consumerId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }

  /**
   * Gets the value of the 'timestamp' field as an Optional&lt;java.time.Instant&gt;.
   * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
   */
  public Optional<java.time.Instant> getOptionalTimestamp() {
    return Optional.<java.time.Instant>ofNullable(timestamp);
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new ResetOffsetToTimestamp RecordBuilder.
   * @return A new ResetOffsetToTimestamp RecordBuilder
   */
  public static br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder newBuilder() {
    return new br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder();
  }

  /**
   * Creates a new ResetOffsetToTimestamp RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ResetOffsetToTimestamp RecordBuilder
   */
  public static br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder newBuilder(br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder other) {
    if (other == null) {
      return new br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder();
    } else {
      return new br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder(other);
    }
  }

  /**
   * Creates a new ResetOffsetToTimestamp RecordBuilder by copying an existing ResetOffsetToTimestamp instance.
   * @param other The existing instance to copy.
   * @return A new ResetOffsetToTimestamp RecordBuilder
   */
  public static br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder newBuilder(br.com.intelipost.kafka.model.ResetOffsetToTimestamp other) {
    if (other == null) {
      return new br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder();
    } else {
      return new br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder(other);
    }
  }

  /**
   * RecordBuilder for ResetOffsetToTimestamp instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ResetOffsetToTimestamp>
    implements org.apache.avro.data.RecordBuilder<ResetOffsetToTimestamp> {

    private java.lang.String consumerId;
    private java.time.Instant timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.consumerId)) {
        this.consumerId = data().deepCopy(fields()[0].schema(), other.consumerId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing ResetOffsetToTimestamp instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.intelipost.kafka.model.ResetOffsetToTimestamp other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.consumerId)) {
        this.consumerId = data().deepCopy(fields()[0].schema(), other.consumerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'consumerId' field.
      * @return The value.
      */
    public java.lang.String getConsumerId() {
      return consumerId;
    }

    /**
      * Gets the value of the 'consumerId' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalConsumerId() {
      return Optional.<java.lang.String>ofNullable(consumerId);
    }

    /**
      * Sets the value of the 'consumerId' field.
      * @param value The value of 'consumerId'.
      * @return This builder.
      */
    public br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder setConsumerId(java.lang.String value) {
      validate(fields()[0], value);
      this.consumerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'consumerId' field has been set.
      * @return True if the 'consumerId' field has been set, false otherwise.
      */
    public boolean hasConsumerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'consumerId' field.
      * @return This builder.
      */
    public br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder clearConsumerId() {
      consumerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }

    /**
      * Gets the value of the 'timestamp' field as an Optional&lt;java.time.Instant&gt;.
      * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
      */
    public Optional<java.time.Instant> getOptionalTimestamp() {
      return Optional.<java.time.Instant>ofNullable(timestamp);
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[1], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public br.com.intelipost.kafka.model.ResetOffsetToTimestamp.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ResetOffsetToTimestamp build() {
      try {
        ResetOffsetToTimestamp record = new ResetOffsetToTimestamp();
        record.consumerId = fieldSetFlags()[0] ? this.consumerId : (java.lang.String) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.time.Instant) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ResetOffsetToTimestamp>
    WRITER$ = (org.apache.avro.io.DatumWriter<ResetOffsetToTimestamp>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ResetOffsetToTimestamp>
    READER$ = (org.apache.avro.io.DatumReader<ResetOffsetToTimestamp>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










